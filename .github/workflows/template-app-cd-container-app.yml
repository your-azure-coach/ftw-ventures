on:
  workflow_call:
    inputs:
      #Mandatory inputs
      IMAGE_NAME:
        type: string
        required: true
      IMAGE_VERSION:
        type: string
        required: true
      ENVIRONMENT_NAME:
        type: string
        required: true
      RESOURCE_GROUP_NAME:
        type: string
        required: true
      CONTAINER_APP_NAME:
        type: string
        required: true
      CONTAINER_REGISTRY_NAME:
        type: string
        required: true
        
      #Optional inputs
      CONTAINER_APP_ENV_VARS:
        type: string
        default: ''
      PUBLISH_TO_APIM:
        type: boolean
        default: false
      RUNNER_NAME:
        type: string
        default: ubuntu-latest
      DOCKER_ARTIFACT_NAME:
        type: string
        default: docker
      CONFIG_ARTIFACT_NAME:
        type: string
        default: config
      
permissions:
  id-token: write
  contents: read
        
name: _template-app-cd-container-app
jobs: 
  deploy-container-app:
    name: Deploy Container App
    runs-on: ${{ inputs.RUNNER_NAME }}
    environment: ${{ inputs.ENVIRONMENT_NAME }}
    steps:
      - name: Download docker artifact
        uses: actions/download-artifact@v3.0.1
        with:
          name: ${{ inputs.DOCKER_ARTIFACT_NAME }}
          path: artifacts/docker
      
      - name: Download config artifact
        uses: actions/download-artifact@v3.0.1
        with:
          name: ${{ inputs.CONFIG_ARTIFACT_NAME }}
          path: artifacts/config
          
      - name: Log into Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }} 
          
      - name: Push image to Azure Container Registry
        working-directory: artifacts/docker
        run: |
          az acr login --name ${{ inputs.CONTAINER_REGISTRY_NAME }}
          
          docker load --input ${{ inputs.IMAGE_NAME }}.tar
          docker tag ${{ inputs.IMAGE_NAME }}:${{ inputs.IMAGE_VERSION }} ${{ inputs.CONTAINER_REGISTRY_NAME }}.azurecr.io/${{ inputs.IMAGE_NAME }}:${{ inputs.IMAGE_VERSION }}
          docker push ${{ inputs.CONTAINER_REGISTRY_NAME }}.azurecr.io/${{ inputs.IMAGE_NAME }}:${{ inputs.IMAGE_VERSION }}
          
      - name: Update Container App
        run: |
          az config set extension.use_dynamic_install=yes_without_prompt
          az containerapp update --name ${{ inputs.CONTAINER_APP_NAME }} --resource-group ${{ inputs.RESOURCE_GROUP_NAME }} --image ${{ inputs.CONTAINER_REGISTRY_NAME }}.azurecr.io/${{ inputs.IMAGE_NAME }}:${{ inputs.IMAGE_VERSION }} --set-env-vars ${{ inputs.CONTAINER_APP_ENV_VARS }} 
          
      - name: Update API in API Management
        if: ${{ inputs.PUBLISH_TO_APIM }}
        working-directory: artifacts/config/api-management/apis/${{ inputs.IMAGE_NAME }}
        shell: pwsh
        run: |
          $apiDefinitionUrl = "https://$((az containerapp show --name ${{ inputs.CONTAINER_APP_NAME }} --resource-group ${{ inputs.RESOURCE_GROUP_NAME }} | ConvertFrom-Json).properties.configuration.ingress.fqdn)/graphql"
          .\deploy.ps1 -EnvironmentName ${{ inputs.ENVIRONMENT_NAME }} -ApiVersion v1 -ApiDefinitionUrl $apiDefinitionUrl
